package main

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"os/signal"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/drive/v3"
	"google.golang.org/api/option"
	"google.golang.org/api/sheets/v4"
)

const (
	maxRetries           = 3
	retryDelay           = 2
	tokenRefreshWindow   = 5 * time.Minute
	maxConcurrentUploads = 5

	sheetIDRange = "'–ß–µ–∫–∏'!B:B"
	sheetUpdate  = "'–ß–µ–∫–∏'!B%d:G%d"
	tokenFile    = "token.json"
)

var (
	fieldKeywords = map[string][]string{
		"address": {"–∞–¥—Ä–µ—Å", "–æ–±—ä–µ–∫—Ç", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "—à–∫–æ–ª–∞", "–¥–æ–º", "—É–ª–∏—Ü–∞", "–º–µ—Å—Ç–æ", "–ª–æ–∫–∞—Ü–∏—è"},
		"amount":  {"—Å—É–º–º–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–æ–ø–ª–∞—Ç–∞", "–ø–ª–∞—Ç—ë–∂", "—Ü–µ–Ω–∞"},
		"comment": {"–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–∫–æ–º–º–µ–Ω—Ç", "–ø—Ä–∏–º", "–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "–∑–∞–º–µ—Ç–∫–∞"},
	}

	tokenMutex        sync.Mutex
	mediaGroupCacheMu sync.Mutex

	oauthConfig     *oauth2.Config
	oauthState      = "state-token"
	authCodeCh      = make(chan string)
	mediaGroupCache = make(map[string]*MediaGroupData)
)

var objectAddresses = []string{
	"–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–æ 1",
	"–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–æ 2",
	"–ö–∞—Å–∫–∞–¥ 1",
	"–ö–∞—Å–∫–∞–¥ 2",
	"–¢–∏–º–∏—Ä—è–∑–µ–≤–∞ 3",
	"–ö–æ–≤–µ—Ä–Ω–∏–Ω–æ",
	"–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è",
	"–ì–æ—Ä–æ–¥ –í—Ä–µ–º–µ–Ω–∏",
	"–ö—Ä—É—Ç–∞—è",
	"–ú–∞–ª–∞—è –ï–ª—å–Ω—è",
	"–¢–∏–º–∏—Ä—è–∑–µ–≤–∞ 9",
	"–ê–Ω–∫—É–¥–∏–Ω–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 47",
	"–°–æ–≤–µ—Ç—Å–∫–æ–π –ê—Ä–º–∏–∏",
	"–í–æ–ª–æ–∫–æ–ª–∞–º—Å–∫–æ–µ —à–æ—Å—Å–µ",
	"–î–æ–ª–≥–æ–ø—Ä—É–¥–Ω–µ–Ω—Å–∫–æ–µ —à–æ—Å—Å–µ 3"}

type ParsedData struct {
	Address, Amount, Comment, Username, Date, DriveLink string
}

type MediaGroupData struct {
	Files                             map[string]*tgbotapi.PhotoSize
	Caption, Address, Amount, Comment string
	Username                          string
	FirstMessageTime, LastUpdated     time.Time
	UserID, ChatID                    int64
	IsProcessing                      bool
}

type fieldMatch struct {
	field      string
	start, end int
}

func saveTokenToFile(token *oauth2.Token) error {
	data, err := json.Marshal(token)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞: %v", err)
	}
	return os.WriteFile(tokenFile, data, 0600)
}

func loadTokenFromFile() (*oauth2.Token, error) {
	data, err := os.ReadFile(tokenFile)
	if err != nil {
		return nil, err
	}
	var token oauth2.Token
	if err := json.Unmarshal(data, &token); err != nil {
		return nil, err
	}
	return &token, nil
}

// ==========================
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
// ==========================
func loadEnvVars() (telegramToken, spreadsheetID, driveFolderID string, adminID int64, googleClientID, googleClientSecret, webhookURL string) {
	telegramToken = os.Getenv("TELEGRAM_BOT_TOKEN")
	spreadsheetID = os.Getenv("GOOGLE_SHEET_ID")
	driveFolderID = os.Getenv("GOOGLE_DRIVE_FOLDER_ID")
	adminStr := strings.TrimSpace(os.Getenv("ADMIN_CHAT_ID"))
	googleClientID = os.Getenv("GOOGLE_OAUTH_CLIENT_ID")
	googleClientSecret = os.Getenv("GOOGLE_OAUTH_CLIENT_SECRET")
	webhookURL = os.Getenv("WEBHOOK_URL")

	if telegramToken == "" || spreadsheetID == "" || driveFolderID == "" || adminStr == "" ||
		googleClientID == "" || googleClientSecret == "" || webhookURL == "" {
		log.Fatal("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚ùå")
	}
	var err error
	adminID, err = strconv.ParseInt(adminStr, 10, 64)
	if err != nil {
		log.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_CHAT_ID: %v", err)
	}
	return
}

// ==========================
// OAuth —Ñ—É–Ω–∫—Ü–∏–∏
// ==========================
func getOAuthClient(config *oauth2.Config) (*http.Client, error) {
	tokenMutex.Lock()
	token, err := loadTokenFromFile()
	tokenMutex.Unlock()

	if err == nil && token.Valid() {
		if time.Until(token.Expiry) < tokenRefreshWindow && token.RefreshToken != "" {
			if newToken, err := refreshToken(config, token); err == nil {
				_ = saveTokenToFile(newToken)
				return config.Client(context.Background(), newToken), nil
			}
		}
		return config.Client(context.Background(), token), nil
	}

	errCh := make(chan error, 1)
	server := startOAuthServer(errCh)
	defer func() {
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		server.Shutdown(ctx)
	}()
	authURL := config.AuthCodeURL(oauthState, oauth2.AccessTypeOffline, oauth2.ApprovalForce)
	// –í—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –Ω–µ–π
	fmt.Printf("üëâ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n%s\n", authURL)
	select {
	case code := <-authCodeCh:
		token, err := config.Exchange(context.Background(), code)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞: %v", err)
		}
		_ = saveTokenToFile(token)
		return config.Client(context.Background(), token), nil
	case err := <-errCh:
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ OAuth —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	case <-time.After(5 * time.Minute):
		return nil, errors.New("–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚è∞")
	}
}

func startOAuthServer(errCh chan error) *http.Server {
	mux := http.NewServeMux()
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Query().Get("state") != oauthState {
			http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π state", http.StatusBadRequest)
			return
		}
		code := r.URL.Query().Get("code")
		if code == "" {
			http.Error(w, "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", http.StatusBadRequest)
			return
		}
		fmt.Fprintln(w, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ üòä")
		authCodeCh <- code
	})
	server := &http.Server{Addr: ":8080", Handler: mux}
	go func() {
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			errCh <- err
		}
	}()
	return server
}

func refreshToken(config *oauth2.Config, token *oauth2.Token) (*oauth2.Token, error) {
	var newToken *oauth2.Token
	var err error
	for i := 0; i < maxRetries; i++ {
		newToken, err = config.TokenSource(context.Background(), token).Token()
		if err == nil {
			if newToken.RefreshToken == "" {
				newToken.RefreshToken = token.RefreshToken
			}
			return newToken, nil
		}
		time.Sleep(time.Duration(retryDelay*(i+1)) * time.Second)
	}
	return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %v", maxRetries, err)
}

// ==========================
// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Google Drive
// ==========================
func ensureObjectFolder(srv *drive.Service, parentID, name string) (string, string, error) {
	name = sanitizeFileName(strings.TrimSpace(name))
	if name == "" {
		name = "–†–∞–∑–Ω–æ–µ"
	}
	query := fmt.Sprintf("name='%s' and mimeType='application/vnd.google-apps.folder' and '%s' in parents and trashed=false", name, parentID)
	var fl *drive.FileList
	var err error
	for i := 0; i < maxRetries; i++ {
		fl, err = srv.Files.List().Q(query).Fields("files(id)").PageSize(10).Do()
		if err == nil {
			break
		}
		srv, _ = refreshDriveService(srv, err)
		time.Sleep(time.Duration(retryDelay*(i+1)) * time.Second)
	}
	if err != nil {
		return "", "", fmt.Errorf("–ø–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –Ω–µ —É–¥–∞–ª—Å—è: %v", err)
	}
	if len(fl.Files) > 0 {
		return fl.Files[0].Id, "–ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É", nil
	}
	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
	folder := &drive.File{
		Name:     name,
		Parents:  []string{parentID},
		MimeType: "application/vnd.google-apps.folder",
	}
	var created *drive.File
	for i := 0; i < maxRetries; i++ {
		created, err = srv.Files.Create(folder).Fields("id").Do()
		if err == nil {
			break
		}
		srv, _ = refreshDriveService(srv, err)
		time.Sleep(time.Duration(retryDelay*(i+1)) * time.Second)
	}
	if err != nil {
		return "", "", fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å: %v", err)
	}
	return created.Id, "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ –∏ —á–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω —Ç—É–¥–∞", nil
}

func refreshDriveService(srv *drive.Service, origErr error) (*drive.Service, error) {
	if strings.Contains(origErr.Error(), "oauth2: token expired") {
		newClient, err := getOAuthClient(oauthConfig)
		if err != nil {
			return srv, fmt.Errorf("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å: %v", err)
		}
		newSrv, err := drive.NewService(context.Background(), option.WithHTTPClient(newClient))
		if err != nil {
			return srv, fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å: %v", err)
		}
		return newSrv, nil
	}
	return srv, origErr
}

func downloadAndUploadFile(fileURL, fileName, addr, amt string, driveSrv *drive.Service, folderID string, fileIndex int) (string, error) {
	resp, err := http.Get(fileURL)
	if err != nil {
		return "", fmt.Errorf("‚ùóÔ∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", err)
	}
	defer resp.Body.Close()

	tmpFile, err := os.CreateTemp("", "tg_photo_*")
	if err != nil {
		return "", fmt.Errorf("‚ùóÔ∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è temp —Ñ–∞–π–ª–∞: %v", err)
	}
	defer os.Remove(tmpFile.Name())

	if _, err = io.Copy(tmpFile, resp.Body); err != nil {
		tmpFile.Close()
		return "", fmt.Errorf("‚ùóÔ∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
	}
	tmpFile.Close()

	var lastErr error
	for i := 0; i < maxRetries; i++ {
		file, err := os.Open(tmpFile.Name())
		if err != nil {
			return "", fmt.Errorf("‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
		}
		driveFile := &drive.File{
			Name:    fileName,
			Parents: []string{folderID},
		}
		res, err := driveSrv.Files.Create(driveFile).Media(file).Fields("webViewLink").Do()
		file.Close()
		if err == nil {
			return res.WebViewLink, nil
		}
		lastErr = err
		driveSrv, _ = refreshDriveService(driveSrv, err)
		time.Sleep(time.Duration(retryDelay*(i+1)) * time.Second)
	}
	return "", fmt.Errorf("‚ùóÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %v", maxRetries, lastErr)
}

// ==========================
// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Google Sheets
// ==========================
func appendToSheet(srv *sheets.Service, sheetID string, data ParsedData) error {
	values := []interface{}{data.Date, data.Username, data.Address, data.Amount, data.Comment, data.DriveLink}
	vr := &sheets.ValueRange{Values: [][]interface{}{values}}

	resp, err := srv.Spreadsheets.Values.Get(sheetID, sheetIDRange).Do()
	if err != nil {
		return fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å: %v", err)
	}
	row := len(resp.Values) + 1
	_, err = srv.Spreadsheets.Values.Update(sheetID, fmt.Sprintf(sheetUpdate, row, row), vr).
		ValueInputOption("USER_ENTERED").Do()
	return err
}

// ==========================
// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
// ==========================
func notifyAdminSuccess(bot *tgbotapi.BotAPI, adminID int64, data ParsedData, userMsg *tgbotapi.Message, folderMsg string) {
	var origMsg string
	if userMsg != nil {
		origMsg = userMsg.Text
	}
	msgText := fmt.Sprintf("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n–í—Ä–µ–º—è: %s\n–ê–¥—Ä–µ—Å: %s\n–°—É–º–º–∞: %s\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: %s\n–ü–∞–ø–∫–∞: %s\n\n–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n%s",
		data.Username, data.Date, data.Address, data.Amount, data.Comment, data.DriveLink, folderMsg, origMsg)
	adminMsg := tgbotapi.NewMessage(adminID, msgText)
	bot.Send(adminMsg)
}

func notifyAdminFailure(bot *tgbotapi.BotAPI, adminID int64, err error, userMsg *tgbotapi.Message) {
	var origMsg, userName string
	if userMsg != nil {
		origMsg = userMsg.Text
		userName = getFullName(userMsg.From)
	}
	msgText := fmt.Sprintf("‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n%s\n\n–û—à–∏–±–∫–∞: %v",
		userName, origMsg, err)
	adminMsg := tgbotapi.NewMessage(adminID, msgText)
	bot.Send(adminMsg)
}

// ==========================
// –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
// ==========================
func parseMessage(message string) (string, string, string, error) {
	if strings.TrimSpace(message) == "" {
		return "", "", "", errors.New("–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
	}
	if strings.ContainsAny(message, ":=") {
		normalized := strings.Join(strings.Fields(message), " ")
		var matches []fieldMatch
		for field, kws := range fieldKeywords {
			for _, kw := range kws {
				pattern := fmt.Sprintf("(?i)%s\\s*[:=]\\s*", regexp.QuoteMeta(kw))
				re := regexp.MustCompile(pattern)
				for _, loc := range re.FindAllStringIndex(normalized, -1) {
					matches = append(matches, fieldMatch{field: field, start: loc[0], end: loc[1]})
				}
			}
		}
		if len(matches) > 0 {
			sort.Slice(matches, func(i, j int) bool { return matches[i].start < matches[j].start })
			fieldValues := make(map[string]string)
			for i, m := range matches {
				endPos := len(normalized)
				if i < len(matches)-1 {
					endPos = matches[i+1].start
				}
				val := strings.TrimSpace(normalized[m.end:endPos])
				if _, ok := fieldValues[m.field]; !ok && val != "" {
					fieldValues[m.field] = val
				}
			}
			addr, amt := fieldValues["address"], cleanAmount(fieldValues["amount"])
			comm := fieldValues["comment"]
			if addr == "" || amt == "" {
				return fallbackParse(message)
			}
			return addr, amt, comm, nil
		}
		return fallbackParse(message)
	}
	return fallbackParse(message)
}

func fallbackParse(message string) (string, string, string, error) {
	if strings.Contains(message, "\n") {
		lines := strings.Split(message, "\n")
		addr := removeLeadingKeyword(strings.TrimSpace(lines[0]), fieldKeywords["address"])
		amt := removeLeadingKeyword(strings.TrimSpace(lines[1]), fieldKeywords["amount"])
		amt = cleanAmount(amt)
		comm := ""
		if len(lines) > 2 {
			comm = removeLeadingKeyword(strings.TrimSpace(strings.Join(lines[2:], "\n")), fieldKeywords["comment"])
		}
		if addr == "" || amt == "" {
			return "", "", "", errors.New("–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		}
		return addr, amt, comm, nil
	}
	lowerMsg := strings.ToLower(message)
	amountIdx := -1
	for _, kw := range fieldKeywords["amount"] {
		if idx := strings.Index(lowerMsg, kw); idx != -1 && (amountIdx == -1 || idx < amountIdx) {
			amountIdx = idx
		}
	}
	if amountIdx != -1 {
		addr := removeLeadingKeyword(strings.TrimSpace(message[:amountIdx]), fieldKeywords["address"])
		amountPart := removeLeadingKeyword(strings.TrimSpace(message[amountIdx:]), fieldKeywords["amount"])
		commentIdx := -1
		for _, kw := range fieldKeywords["comment"] {
			if idx := strings.Index(strings.ToLower(amountPart), kw); idx != -1 && (commentIdx == -1 || idx < commentIdx) {
				commentIdx = idx
			}
		}
		if commentIdx != -1 {
			amt := cleanAmount(strings.TrimSpace(amountPart[:commentIdx]))
			comm := removeLeadingKeyword(strings.TrimSpace(amountPart[commentIdx:]), fieldKeywords["comment"])
			return addr, amt, comm, nil
		}
		return addr, cleanAmount(amountPart), "", nil
	}
	return removeLeadingKeyword(message, fieldKeywords["address"]), "", "", errors.New("—Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
}

func cleanAmount(amount string) string {
	re := regexp.MustCompile(`[^0-9.,]`)
	cleaned := re.ReplaceAllString(amount, "")
	return strings.ReplaceAll(cleaned, ".", ",")
}

func sanitizeFileName(name string) string {
	re := regexp.MustCompile(`[^–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s\.-]`)
	s := re.ReplaceAllString(name, "_")
	s = regexp.MustCompile(`\s+`).ReplaceAllString(s, "_")
	return strings.Trim(regexp.MustCompile(`_+`).ReplaceAllString(s, "_"), "_")
}

func removeLeadingKeyword(text string, keywords []string) string {
	trimmed := strings.TrimSpace(text)
	lower := strings.ToLower(trimmed)
	for _, kw := range keywords {
		if strings.HasPrefix(lower, kw) {
			return strings.TrimSpace(trimmed[len(kw):])
		}
	}
	return trimmed
}

func getFullName(user *tgbotapi.User) string {
	if user.LastName != "" {
		return fmt.Sprintf("%s %s", user.FirstName, user.LastName)
	}
	return user.FirstName
}

// ==========================
// Telegram –•–µ–Ω–¥–ª–µ—Ä—ã
// ==========================
func processPhoto(bot *tgbotapi.BotAPI, fileID string, driveSrv *drive.Service, folderID, addr, amt string, fileIndex int) (string, error) {
	fileURL, err := bot.GetFileDirectURL(fileID)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ: %v", err)
	}

	// –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: –¥–∞—Ç–∞–∑–∞–≥—Ä—É–∑–∫–∏_–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—É–º–º–∞_–Ω–æ–º–µ—Ä
	msk := time.FixedZone("MSK", 3*3600)
	dateStr := time.Now().In(msk).Format("020106") // —Ñ–æ—Ä–º–∞—Ç –¥–¥–º–º–≥–≥
	sanitizedAddr := sanitizeFileName(addr)
	sanitizedAmt := sanitizeFileName(strings.ReplaceAll(amt, ",", "."))
	fileName := fmt.Sprintf("%s_%s_%s_%02d.jpg", dateStr, sanitizedAddr, sanitizedAmt, fileIndex)

	return downloadAndUploadFile(fileURL, fileName, addr, amt, driveSrv, folderID, fileIndex)
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
func processMediaGroup(bot *tgbotapi.BotAPI, groupID string, sheetsSrv *sheets.Service, sheetID string, driveSrv *drive.Service, parentID string, adminID int64) {
	// –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
	time.Sleep(500 * time.Millisecond)

	mediaGroupCacheMu.Lock()
	group, exists := mediaGroupCache[groupID]
	if !exists || len(group.Files) == 0 {
		mediaGroupCacheMu.Unlock()
		return
	}

	addr, amt, comm, chatID, username := group.Address, group.Amount, group.Comment, group.ChatID, group.Username
	var photos []*tgbotapi.PhotoSize
	for _, p := range group.Files {
		photos = append(photos, p)
	}
	mediaGroupCacheMu.Unlock()

	if addr == "" || amt == "" {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùóÔ∏è –£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø—ã!"))
		return
	}

	folderID, folderMsg, err := ensureObjectFolder(driveSrv, parentID, addr)
	if err != nil {
		notifyAdminFailure(bot, adminID, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–∞: %v", err), nil)
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–∞: "+err.Error()))
		return
	}

	results := make(chan string, len(photos))
	var wg sync.WaitGroup
	sem := make(chan struct{}, maxConcurrentUploads)

	for i, photo := range photos {
		wg.Add(1)
		go func(i int, p *tgbotapi.PhotoSize) {
			defer wg.Done()
			sem <- struct{}{}
			defer func() { <-sem }()

			link, err := processPhoto(bot, p.FileID, driveSrv, folderID, addr, amt, i+1)
			if err == nil {
				results <- link
			}
		}(i, photo)
	}

	wg.Wait()
	close(results)

	var links []string
	for l := range results {
		links = append(links, l)
	}

	if len(links) == 0 {
		notifyAdminFailure(bot, adminID, errors.New("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"), nil)
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."))
		return
	}

	msk := time.FixedZone("MSK", 3*3600)
	parsedData := ParsedData{
		Address:   addr,
		Amount:    amt,
		Comment:   comm,
		Username:  username,
		Date:      time.Now().In(msk).Format("02.01.2006 15:04:05"),
		DriveLink: strings.Join(links, " "),
	}

	if err := appendToSheet(sheetsSrv, sheetID, parsedData); err != nil {
		notifyAdminFailure(bot, adminID, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É: %v", err), nil)
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùóÔ∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É: "+err.Error()))
		return
	}

	mediaGroupCacheMu.Lock()
	delete(mediaGroupCache, groupID)
	mediaGroupCacheMu.Unlock()

	bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n–§–æ—Ç–æ: %d/%d –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\n–ê–¥—Ä–µ—Å: %s\n–°—É–º–º–∞: %s\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s",
		len(links), len(photos), addr, amt, comm)))
	notifyAdminSuccess(bot, adminID, parsedData, nil, folderMsg)
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
func handleMediaGroupMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, sheetsSrv *sheets.Service, sheetID string, driveSrv *drive.Service, parentID string, adminID int64) {
	if len(msg.Photo) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùóÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."))
		return
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç ID –≥—Ä—É–ø–ø—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
	if msg.MediaGroupID == "" {
		handleSinglePhotoMessage(bot, msg, sheetsSrv, sheetID, driveSrv, parentID, adminID)
		return
	}

	mediaGroupCacheMu.Lock()
	group, exists := mediaGroupCache[msg.MediaGroupID]

	if !exists {
		addr, amt, comm, err := parseMessage(msg.Caption)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–¥–ø–∏—Å—å. –£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ê–¥—Ä–µ—Å: ...\n–°—É–º–º–∞: ..."))
			mediaGroupCacheMu.Unlock()
			return
		}

		if addr == "" || amt == "" {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º—É!"))
			mediaGroupCacheMu.Unlock()
			return
		}

		group = &MediaGroupData{
			Files:            make(map[string]*tgbotapi.PhotoSize),
			Caption:          msg.Caption,
			Address:          addr,
			Amount:           amt,
			Comment:          comm,
			FirstMessageTime: time.Now(),
			LastUpdated:      time.Now(),
			UserID:           msg.From.ID,
			ChatID:           msg.Chat.ID,
			Username:         getFullName(msg.From),
		}
		mediaGroupCache[msg.MediaGroupID] = group
	}

	best := msg.Photo[len(msg.Photo)-1]
	if _, ok := group.Files[best.FileID]; !ok {
		group.Files[best.FileID] = &best
		group.LastUpdated = time.Now()
	}

	// –ò–∑–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ 2+ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–ø—É—Å—Ç—è 1 —Å–µ–∫—É–Ω–¥—É
	shouldProcess := !group.IsProcessing &&
		(len(group.Files) >= 2 || time.Since(group.FirstMessageTime) >= time.Second)

	if shouldProcess {
		group.IsProcessing = true
		go processMediaGroup(bot, msg.MediaGroupID, sheetsSrv, sheetID, driveSrv, parentID, adminID)
	}
	mediaGroupCacheMu.Unlock()
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleSinglePhotoMessage
func handleSinglePhotoMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, sheetsSrv *sheets.Service, sheetID string, driveSrv *drive.Service, parentID string, adminID int64) {
	if msg.Caption == "" {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùóÔ∏è –£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ê–¥—Ä–µ—Å: ...\n–°—É–º–º–∞: ..."))
		return
	}

	addr, amt, comm, err := parseMessage(msg.Caption)
	if err != nil {
		notifyAdminFailure(bot, adminID, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–¥–ø–∏—Å—å: %v", err), msg)
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–¥–ø–∏—Å—å. –£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ê–¥—Ä–µ—Å: ...\n–°—É–º–º–∞: ..."))
		return
	}

	if addr == "" || amt == "" {
		notifyAdminFailure(bot, adminID, errors.New("–∞–¥—Ä–µ—Å –∏–ª–∏ —Å—É–º–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"), msg)
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ –ø–æ–¥–ø–∏—Å–∏!"))
		return
	}

	folderID, folderMsg, err := ensureObjectFolder(driveSrv, parentID, addr)
	if err != nil {
		notifyAdminFailure(bot, adminID, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–∞: %v", err), msg)
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–∞: "+err.Error()))
		return
	}

	best := msg.Photo[len(msg.Photo)-1]
	link, err := processPhoto(bot, best.FileID, driveSrv, folderID, addr, amt, 1)
	if err != nil {
		notifyAdminFailure(bot, adminID, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤ Google Drive: %v", err), msg)
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤ Google Drive: "+err.Error()))
		return
	}

	parsedData := ParsedData{
		Address:   addr,
		Amount:    amt,
		Comment:   comm,
		Username:  getFullName(msg.From),
		Date:      time.Now().Format("02.01.2006 15:04:05"),
		DriveLink: link,
	}

	if err := appendToSheet(sheetsSrv, sheetID, parsedData); err != nil {
		notifyAdminFailure(bot, adminID, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: %v", err), msg)
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É: "+err.Error()))
		return
	}

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n–ê–¥—Ä–µ—Å: %s\n–°—É–º–º–∞: %s", addr, amt)))
	notifyAdminSuccess(bot, adminID, parsedData, msg, folderMsg)
}

// ==========================
// –§—É–Ω–∫—Ü–∏—è keep-alive –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è
// ==========================
func keepAlive(url string) {
	// –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ Railway
	ticker := time.NewTicker(5 * time.Minute)
	go func() {
		for range ticker.C {
			if resp, err := http.Get(url); err == nil {
				resp.Body.Close()
			}
		}
	}()
}

// ==========================
// HTTP —Å–µ—Ä–≤–µ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram
// ==========================

// ==========================
// HTTP —Å–µ—Ä–≤–µ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram
// ==========================

func sendObjectsList(bot *tgbotapi.BotAPI, chatID int64) {
	var messageText string = "üìç –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤:\n\n"

	for i, addr := range objectAddresses {
		messageText += fmt.Sprintf("%d. %s\n", i+1, addr)
	}

	messageText += "\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞."

	msg := tgbotapi.NewMessage(chatID, messageText)

	bot.Send(msg)
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
func getMainKeyboard() tgbotapi.ReplyKeyboardMarkup {
	startButton := tgbotapi.NewKeyboardButton("–ù–∞—á–∞—Ç—å")
	objectsButton := tgbotapi.NewKeyboardButton("–û–±—ä–µ–∫—Ç—ã")

	return tgbotapi.NewReplyKeyboard(
		[]tgbotapi.KeyboardButton{startButton},
		[]tgbotapi.KeyboardButton{objectsButton},
	)
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
func sendHelpMessage(bot *tgbotapi.BotAPI, chatID int64) {
	helpText := "üëã –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ–∫–æ–≤\\!\n\n" +
		"–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?\n" +
		"–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–∞—Ö –≤ Google\\-—Ç–∞–±–ª–∏—Ü—É –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã\\. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é, —É–∫–∞–∑–∞–≤:\n\n" +
		"‚Ä¢ –ê–¥—Ä–µ—Å \\- –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ üè†\n" +
		"‚Ä¢ –°—É–º–º—É \\- —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ üí∞\n" +
		"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π \\(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ\\) \\- –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∞ üìù\n\n" +
		"–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?\n" +
		"–£ –≤–∞—Å –µ—Å—Ç—å 3 —É–¥–æ–±–Ω—ã—Ö —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n" +
		"1Ô∏è‚É£ –° –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\n" +
		"\n" +
		"–ê–¥—Ä–µ—Å: –¢–∏–º–∏—Ä—è–∑–µ–≤–∞ 19, –∫–≤\\. 201 –°—É–º–º–∞: 1002,70 –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ü—Ä–æ–≤–æ–¥–∞\n" +
		"\n\n" +
		"2Ô∏è‚É£ –° –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫\n" +
		"\n" +
		"–ê–¥—Ä–µ—Å: —É–ª\\. –ü—É—à–∫–∏–Ω–∞, –¥\\. 20, –∫–≤\\. 51\n" +
		"–°—É–º–º–∞: 90,91\n" +
		"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ó–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫—É\n" +
		"\n\n" +
		"3Ô∏è‚É£ –ë–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫\n" +
		"\n" +
		"–¢–∏–º–∏—Ä—è–∑–µ–≤–∞, 20, 201\n" +
		"1002,7\n" +
		"–ü—Ä–æ–≤–æ–¥–∞\n" +
		"\n\n" +
		"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –¥–µ–ª–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏—à–∏ Enter –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n\n" +
		"–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n" +
		"‚úÖ –ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å –µ–¥–∏–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ \\(–≤–∫–ª—é—á–∞—è —Ç–æ—á–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤\\)\n" +
		"‚úÖ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–Ω—è—Ç–Ω–æ: ¬´–ö–∞—Å–∫–∞–¥ 2¬ª –∏–ª–∏ ¬´–¢–∏–º–∏—Ä—è–∑–µ–≤–∞ 19¬ª \\(–∏–∑–±–µ–≥–∞–π—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ç–∏–ø–∞ ¬´–∫–∞—Å–∫–∞–¥,1¬ª\\)\n" +
		"‚úÖ –î–ª—è —Å—É–º–º—ã –ø–æ–¥—Ö–æ–¥—è—Ç —Ñ–æ—Ä–º–∞—Ç—ã: ¬´109,10¬ª –∏ ¬´109\\.1¬ª\n" +
		"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–∏—à–∏—Ç–µ –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ\n\n" +
		"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n" +
		"‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≥—Ä—É–ø–ø—É –¥–æ 10 —Ñ–æ—Ç–æ\n" +
		"‚Ä¢ –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ –ø–æ–¥–ø–∏—Å—å —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ\n\n" +
		"–û—Ç–≤–µ—Ç—ã –±–æ—Ç–∞\n" +
		"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: \"–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω\\! –§–æ—Ç–æ: X/Y –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\\. –ê–¥—Ä–µ—Å: \\.\\.\\.\"\n" +
		"‚ùó –û—à–∏–±–∫–∞: –ë–æ—Ç —Å–æ–æ–±—â–∏—Ç, —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\\. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É\n\n" +
		"‚ö†Ô∏è –í–ê–ñ–ù–û\\: –í—Å–µ–≥–¥–∞ –¥–æ–∂–∏–¥–∞–π—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\\!\n" +
		"‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ\n" +
		"‚Ä¢ –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –µ–≥–æ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É\n" +
		"‚Ä¢ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ\n\n" +
		"–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n" +
		"–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n" +
		"\n" +
		"–ê–¥—Ä–µ—Å: —É–ª\\. –ü—É—à–∫–∏–Ω–∞, –¥\\. 20, –∫–≤\\. 51\n" +
		"–°—É–º–º–∞: 90,91\n" +
		"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ó–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫—É\n" +
		"\n\n" +
		"–¢–∞–∫–∂–µ –ø–æ–¥–æ–π–¥–µ—Ç:\n" +
		"\n" +
		"–ö–∞—Å–∫–∞–¥ 2\n" +
		"500,28\n" +
		"–•–æ–∑\\. —Ç–æ–≤–∞—Ä—ã\n" +
		"\n\n" +
		"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\\! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é üì∏\n\n" +
		"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–±—ä–µ–∫—Ç—ã\" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\\."

	msg := tgbotapi.NewMessage(chatID, helpText)
	msg.ParseMode = "MarkdownV2"
	msg.ReplyMarkup = getMainKeyboard()

	if _, err := bot.Send(msg); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
	}
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func setupHandler(bot *tgbotapi.BotAPI, sheetsSrv *sheets.Service, sheetID string, driveSrv *drive.Service, parentID string, adminID int64) {
	// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
	go func() {
		ticker := time.NewTicker(1 * time.Minute)
		defer ticker.Stop()
		for range ticker.C {
			mediaGroupCacheMu.Lock()
			now := time.Now()
			for id, data := range mediaGroupCache {
				if now.Sub(data.LastUpdated) > 2*time.Minute {
					delete(mediaGroupCache, id)
				}
			}
			mediaGroupCacheMu.Unlock()
		}
	}()

	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != "POST" {
			http.Error(w, "Unsupported method", http.StatusMethodNotAllowed)
			return
		}
		body, err := ioutil.ReadAll(r.Body)
		if err != nil {
			http.Error(w, "Bad Request", http.StatusBadRequest)
			return
		}
		var update tgbotapi.Update
		if err = json.Unmarshal(body, &update); err != nil {
			http.Error(w, "Bad Request", http.StatusBadRequest)
			return
		}

		if update.Message != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help
			if update.Message.IsCommand() {
				switch update.Message.Command() {
				case "start", "help":
					sendHelpMessage(bot, update.Message.Chat.ID)
				}
			} else if update.Message.Text == "–ù–∞—á–∞—Ç—å" {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å"
				sendHelpMessage(bot, update.Message.Chat.ID)
			} else if update.Message.Text == "–û–±—ä–µ–∫—Ç—ã" {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û–±—ä–µ–∫—Ç—ã"
				sendObjectsList(bot, update.Message.Chat.ID)
			} else if update.Message.Photo != nil {
				go handleMediaGroupMessage(bot, update.Message, sheetsSrv, sheetID, driveSrv, parentID, adminID)
			}
		}
		w.WriteHeader(http.StatusOK)
	})
}

// ==========================
// Main —Ñ—É–Ω–∫—Ü–∏—è
// ==========================
func main() {
	telegramToken, sheetID, driveFolderID, adminID, googleClientID, googleClientSecret, webhookURL := loadEnvVars()

	oauthConfig = &oauth2.Config{
		ClientID:     googleClientID,
		ClientSecret: googleClientSecret,
		RedirectURL:  "https://checkstosheets-production.up.railway.app/",
		Scopes: []string{
			"https://www.googleapis.com/auth/spreadsheets",
			"https://www.googleapis.com/auth/drive.file",
		},
		Endpoint: google.Endpoint,
	}

	// –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
	go func() {
		ticker := time.NewTicker(1 * time.Hour)
		defer ticker.Stop()
		for range ticker.C {
			_, _ = getOAuthClient(oauthConfig)
		}
	}()

	client, err := getOAuthClient(oauthConfig)
	if err != nil {
		log.Fatalf("OAuth –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω: %v", err)
	}

	sheetsSrv, err := sheets.NewService(context.Background(), option.WithHTTPClient(client))
	if err != nil {
		log.Fatalf("Sheets —Å–µ—Ä–≤–∏—Å –Ω–µ —Å–æ–∑–¥–∞–Ω: %v", err)
	}
	driveSrv, err := drive.NewService(context.Background(), option.WithHTTPClient(client))
	if err != nil {
		log.Fatalf("Drive —Å–µ—Ä–≤–∏—Å –Ω–µ —Å–æ–∑–¥–∞–Ω: %v", err)
	}

	bot, err := tgbotapi.NewBotAPI(telegramToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %v", err)
	}
	// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç–∫–ª—é—á—ë–Ω

	parsedURL, err := url.Parse(webhookURL)
	if err != nil {
		log.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç WEBHOOK_URL: %v", err)
	}
	webhookCfg := tgbotapi.WebhookConfig{URL: parsedURL, MaxConnections: 40}
	if _, err = bot.Request(webhookCfg); err != nil {
		log.Fatalf("Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %v", err)
	}

	keepAlive(webhookURL)
	setupHandler(bot, sheetsSrv, sheetID, driveSrv, driveFolderID, adminID)

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	server := &http.Server{Addr: ":" + port}
	go func() {
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: %v", err)
		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt, syscall.SIGTERM)
	<-quit
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	_ = server.Shutdown(ctx)
}
