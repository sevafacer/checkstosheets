package main

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"os/signal"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/drive/v3"
	"google.golang.org/api/option"
	"google.golang.org/api/sheets/v4"
)

// ========================
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ üöÄ
// ========================
const (
	maxRetries           = 3
	retryDelay           = 2 // –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏ (—Å–µ–∫)
	tokenRefreshWindow   = 5 * time.Minute
	mediaGroupCacheTTL   = 3 * time.Minute
	numWorkers           = 50
	sheetIDRange         = "'–ß–µ–∫–∏'!B:B"
	sheetUpdateRange     = "'–ß–µ–∫–∏'!B%d:G%d"
	sheetFormatRange     = "'–ß–µ–∫–∏'!B%d:G%d"
	sheetIDPropID        = 1051413829
	maxConcurrentUploads = 5
)

var (
	// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∏–∑ –ø–æ–¥–ø–∏—Å–∏ (–∞–¥—Ä–µ—Å, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
	fieldKeywords = map[string][]string{
		"address": {"–∞–¥—Ä–µ—Å", "–æ–±—ä–µ–∫—Ç", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "—à–∫–æ–ª–∞", "–¥–æ–º", "—É–ª–∏—Ü–∞", "–º–µ—Å—Ç–æ", "–ª–æ–∫–∞—Ü–∏—è"},
		"amount":  {"—Å—É–º–º–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–æ–ø–ª–∞—Ç–∞", "–ø–ª–∞—Ç—ë–∂", "—Ü–µ–Ω–∞"},
		"comment": {"–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–∫–æ–º–º–µ–Ω—Ç", "–ø—Ä–∏–º", "–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "–∑–∞–º–µ—Ç–∫–∞"},
	}

	// –ú—å—é—Ç–µ–∫—Å—ã –∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
	tokenMutex              sync.Mutex
	mediaGroupCacheMu       sync.Mutex
	mediaGroupCleanupTicker *time.Ticker

	// OAuth-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø–æ–ª–Ω—è–µ–º –≤ main()
	oauthConfig *oauth2.Config

	// –°–æ—Å—Ç–æ—è–Ω–∏–µ OAuth
	oauthState = "state-token"
	authCodeCh = make(chan string)

	// –ö—ç—à –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã)
	mediaGroupCache = make(map[string]*MediaGroupData)

	// –û–±—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏–π, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
	taskQueue   = make(chan FileTask, 100)
	resultsChan = make(chan FileResult, 100)

	// –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–æ—Ä—É—Ç–∏–Ω (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
	semaphore = make(chan struct{}, 100)
	wg        sync.WaitGroup
)

//
// ========================
// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö üì¶
// ========================

// ParsedData —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets
type ParsedData struct {
	Address   string
	Amount    string
	Comment   string
	Username  string
	Date      string
	DriveLink string
}

// TokenInfo –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ OAuth –≤ –≤–∏–¥–µ JSON
type TokenInfo struct {
	AccessToken  string    `json:"access_token"`
	TokenType    string    `json:"token_type"`
	RefreshToken string    `json:"refresh_token"`
	Expiry       time.Time `json:"expiry"`
}

// MediaGroupData ‚Äì –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–ø–ø–æ–π –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ)
type MediaGroupData struct {
	Files            map[string]*tgbotapi.PhotoSize // –ö—ç—à —Ñ–æ—Ç–æ (–∫–ª—é—á ‚Äì FileID)
	Caption          string                         // –ü–æ–¥–ø–∏—Å—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
	Address          string
	Amount           string
	Comment          string
	FirstMessageTime time.Time // –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
	LastUpdated      time.Time // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
	UserID           int64
	ChatID           int64
	Username         string
	IsProcessing     bool // –§–ª–∞–≥, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
}

// FileTask –∏ FileResult –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
type FileTask struct {
	FileID         string
	FileURL        string
	BaseName       string
	DateFormatted  string
	Amount         string
	DriveService   *drive.Service
	ObjectFolderID string
}

type FileResult struct {
	FileID    string
	DriveLink string
	Error     error
}

// –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–∏ –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ
type fieldMatch struct {
	field string
	start int
	end   int
}

//
// ========================
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è üîß
// ========================

func loadEnvVars() (string, string, string, int64, string, string, string) {
	telegramToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if telegramToken == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå")
	}
	spreadsheetId := os.Getenv("GOOGLE_SHEET_ID")
	if spreadsheetId == "" {
		log.Fatal("GOOGLE_SHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå")
	}
	driveFolderId := os.Getenv("GOOGLE_DRIVE_FOLDER_ID")
	if driveFolderId == "" {
		log.Fatal("GOOGLE_DRIVE_FOLDER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå")
	}
	adminIDStr := strings.TrimSpace(os.Getenv("ADMIN_CHAT_ID"))
	if adminIDStr == "" {
		log.Fatal("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå")
	}
	adminID, err := strconv.ParseInt(adminIDStr, 10, 64)
	if err != nil {
		log.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_CHAT_ID: %v", err)
	}
	googleClientID := os.Getenv("GOOGLE_OAUTH_CLIENT_ID")
	googleClientSecret := os.Getenv("GOOGLE_OAUTH_CLIENT_SECRET")
	if googleClientID == "" || googleClientSecret == "" {
		log.Fatal("GOOGLE_OAUTH_CLIENT_ID –∏ GOOGLE_OAUTH_CLIENT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚ùå")
	}
	webhookURL := os.Getenv("WEBHOOK_URL")
	if webhookURL == "" {
		log.Fatal("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå")
	}
	return telegramToken, spreadsheetId, driveFolderId, adminID, googleClientID, googleClientSecret, webhookURL
}

//
// ========================
// –§—É–Ω–∫—Ü–∏–∏ OAuth –∏ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º üîë
// ========================

// getOAuthClient –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º OAuth —Ç–æ–∫–µ–Ω–æ–º
func getOAuthClient(config *oauth2.Config) (*http.Client, error) {
	tokenMutex.Lock()
	token, err := loadTokenFromEnv()
	tokenMutex.Unlock()
	if err == nil {
		// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á—ë—Ç, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
		if time.Until(token.Expiry) < tokenRefreshWindow && token.RefreshToken != "" {
			newToken, err := refreshToken(config, token)
			if err == nil {
				_ = saveTokenToEnv(newToken)
				return config.Client(context.Background(), newToken), nil
			}
		} else if token.Valid() {
			return config.Client(context.Background(), token), nil
		}
	}

	// –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	serverErrCh := make(chan error, 1)
	server := startOAuthServer(serverErrCh)
	defer func() {
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		_ = server.Shutdown(ctx)
	}()

	authURL := config.AuthCodeURL(oauthState, oauth2.AccessTypeOffline, oauth2.ApprovalForce)
	fmt.Printf("üëâ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n%v\n", authURL)

	select {
	case code := <-authCodeCh:
		token, err := config.Exchange(context.Background(), code)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞: %v", err)
		}
		_ = saveTokenToEnv(token)
		return config.Client(context.Background(), token), nil
	case err := <-serverErrCh:
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ OAuth —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	case <-time.After(5 * time.Minute):
		return nil, errors.New("–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚è∞")
	}
}

// startOAuthServer –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
func startOAuthServer(errCh chan<- error) *http.Server {
	mux := http.NewServeMux()
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Query().Get("state") != oauthState {
			http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π state", http.StatusBadRequest)
			return
		}
		code := r.URL.Query().Get("code")
		if code == "" {
			http.Error(w, "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", http.StatusBadRequest)
			return
		}
		fmt.Fprintln(w, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ üòä")
		authCodeCh <- code
	})
	server := &http.Server{
		Addr:    ":8080",
		Handler: mux,
	}
	go func() {
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			errCh <- err
		}
	}()
	return server
}

// saveTokenToEnv —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (–≤ base64)
func saveTokenToEnv(token *oauth2.Token) error {
	if token == nil {
		return errors.New("–ø—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω")
	}
	tokenInfo := TokenInfo{
		AccessToken:  token.AccessToken,
		TokenType:    token.TokenType,
		RefreshToken: token.RefreshToken,
		Expiry:       token.Expiry,
	}
	// –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç RefreshToken ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	if token.RefreshToken == "" && os.Getenv("GOOGLE_OAUTH_TOKEN") != "" {
		oldToken, err := loadTokenFromEnv()
		if err == nil && oldToken.RefreshToken != "" {
			tokenInfo.RefreshToken = oldToken.RefreshToken
		}
	}
	tokenJSON, err := json.Marshal(tokenInfo)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞: %v", err)
	}
	encodedToken := base64.StdEncoding.EncodeToString(tokenJSON)
	return os.Setenv("GOOGLE_OAUTH_TOKEN", encodedToken)
}

// loadTokenFromEnv –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
func loadTokenFromEnv() (*oauth2.Token, error) {
	tokenStr := os.Getenv("GOOGLE_OAUTH_TOKEN")
	if tokenStr == "" {
		return nil, errors.New("—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
	tokenJSON, err := base64.StdEncoding.DecodeString(tokenStr)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
	}
	var tokenInfo TokenInfo
	if err := json.Unmarshal(tokenJSON, &tokenInfo); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–Ω–º–∞—Ä—à–∞–ª–∏–Ω–≥–∞: %v", err)
	}
	return &oauth2.Token{
		AccessToken:  tokenInfo.AccessToken,
		TokenType:    tokenInfo.TokenType,
		RefreshToken: tokenInfo.RefreshToken,
		Expiry:       tokenInfo.Expiry,
	}, nil
}

// refreshToken –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å OAuth —Ç–æ–∫–µ–Ω —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
func refreshToken(config *oauth2.Config, token *oauth2.Token) (*oauth2.Token, error) {
	var newToken *oauth2.Token
	var err error
	for i := 0; i < maxRetries; i++ {
		newToken, err = config.TokenSource(context.Background(), token).Token()
		if err == nil {
			if newToken.RefreshToken == "" {
				newToken.RefreshToken = token.RefreshToken
			}
			return newToken, nil
		}
		time.Sleep(time.Duration(retryDelay*(i+1)) * time.Second)
	}
	return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %v", maxRetries, err)
}

//
// ========================
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Drive –∏ Sheets üìÅüìä
// ========================

// ensureObjectFolder –∏—â–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É –Ω–∞ Google Drive –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥—Ä–µ—Å)
func ensureObjectFolder(service *drive.Service, parentFolderId, objectName string) (string, error) {
	sanitized := strings.TrimSpace(objectName)
	if sanitized == "" {
		sanitized = "–†–∞–∑–Ω–æ–µ"
	}
	sanitized = sanitizeFileName(sanitized)
	query := fmt.Sprintf("name = '%s' and mimeType = 'application/vnd.google-apps.folder' and '%s' in parents and trashed = false", sanitized, parentFolderId)

	var fileList *drive.FileList
	var err error
	for i := 0; i < maxRetries; i++ {
		fileList, err = service.Files.List().Q(query).Fields("files(id, name)").PageSize(10).Do()
		if err == nil {
			break
		}
		service, _ = refreshDriveService(service, err)
		time.Sleep(time.Duration(retryDelay*(i+1)) * time.Second)
	}
	if err != nil {
		return "", fmt.Errorf("–ø–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –Ω–µ —É–¥–∞–ª—Å—è: %v", err)
	}
	if len(fileList.Files) > 0 {
		return fileList.Files[0].Id, nil
	}

	// –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
	folder := &drive.File{
		Name:     sanitized,
		Parents:  []string{parentFolderId},
		MimeType: "application/vnd.google-apps.folder",
	}
	var created *drive.File
	for i := 0; i < maxRetries; i++ {
		created, err = service.Files.Create(folder).Fields("id, name").Do()
		if err == nil {
			break
		}
		service, _ = refreshDriveService(service, err)
		time.Sleep(time.Duration(retryDelay*(i+1)) * time.Second)
	}
	if err != nil {
		return "", fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å: %v", err)
	}
	return created.Id, nil
}

// uploadFileToDrive –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ Google Drive
func uploadFileToDrive(service *drive.Service, filePath, fileName, folderId string) (string, error) {
	var lastErr error
	for i := 0; i < maxRetries; i++ {
		f, err := os.Open(filePath)
		if err != nil {
			return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
		}
		defer f.Close()
		driveFile := &drive.File{
			Name:    fileName,
			Parents: []string{folderId},
		}
		res, err := service.Files.Create(driveFile).Media(f).Fields("webViewLink").Do()
		if err == nil {
			return res.WebViewLink, nil
		}
		lastErr = err
		service, _ = refreshDriveService(service, err)
		time.Sleep(time.Duration(retryDelay*(i+1)) * time.Second)
	}
	return "", fmt.Errorf("–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: %v", lastErr)
}

// refreshDriveService –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å Google Drive, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫
func refreshDriveService(service *drive.Service, originalErr error) (*drive.Service, error) {
	if strings.Contains(originalErr.Error(), "oauth2: token expired") {
		newClient, err := getOAuthClient(oauthConfig)
		if err != nil {
			return service, fmt.Errorf("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å: %v", err)
		}
		newService, err := drive.NewService(context.Background(), option.WithHTTPClient(newClient))
		if err != nil {
			return service, fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å: %v", err)
		}
		return newService, nil
	}
	return service, originalErr
}

// appendToSheet –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
func appendToSheet(service *sheets.Service, spreadsheetId string, data ParsedData) error {
	// –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–±–µ–ª –≤–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç–æ–π
	values := []interface{}{data.Date, data.Username, data.Address, data.Amount, data.Comment, data.DriveLink}
	vr := &sheets.ValueRange{Values: [][]interface{}{values}}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
	resp, err := service.Spreadsheets.Values.Get(spreadsheetId, sheetIDRange).Do()
	if err != nil {
		return fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å: %v", err)
	}
	lastRow := 1
	if len(resp.Values) > 0 {
		lastRow = len(resp.Values) + 1
	}
	rangeStr := fmt.Sprintf(sheetUpdateRange, lastRow, lastRow)
	_, err = service.Spreadsheets.Values.Update(spreadsheetId, rangeStr, vr).ValueInputOption("USER_ENTERED").Do()
	if err != nil {
		return fmt.Errorf("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Sheets –Ω–µ —É–¥–∞–ª–æ—Å—å: %v", err)
	}

	// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
	formatRequest := sheets.BatchUpdateSpreadsheetRequest{
		Requests: []*sheets.Request{
			{
				RepeatCell: &sheets.RepeatCellRequest{
					Range: &sheets.GridRange{
						SheetId:          sheetIDPropID,
						StartRowIndex:    int64(lastRow - 1),
						EndRowIndex:      int64(lastRow),
						StartColumnIndex: 3,
						EndColumnIndex:   4,
					},
					Cell: &sheets.CellData{
						UserEnteredFormat: &sheets.CellFormat{
							NumberFormat: &sheets.NumberFormat{
								Type:    "NUMBER",
								Pattern: "#,##0.00[$‚ÇΩ]",
							},
						},
					},
					Fields: "userEnteredFormat.numberFormat",
				},
			},
		},
	}
	_, err = service.Spreadsheets.BatchUpdate(spreadsheetId, &formatRequest).Do()
	return err
}

// keepAlive –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ GET-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ webhookURL, —á—Ç–æ–±—ã –Ω–µ "–∑–∞—Å—ã–ø–∞–ª" —Å–µ—Ä–≤–µ—Ä
func keepAlive(webhookURL string) {
	ticker := time.NewTicker(10 * time.Minute)
	go func() {
		for range ticker.C {
			resp, err := http.Get(webhookURL)
			if err != nil {
				continue
			}
			resp.Body.Close()
		}
	}()
}

//
// ========================
// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram üì≤
// ========================

// handleSinglePhotoMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–¥–Ω–∏–º —Ñ–æ—Ç–æ
func handleSinglePhotoMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, sheetsService *sheets.Service, spreadsheetId string, driveService *drive.Service, parentFolderId string) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å–∏
	if message.Caption == "" {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùóÔ∏è –£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ê–¥—Ä–µ—Å: ...\n–°—É–º–º–∞: ..."))
		return
	}

	// –ü–∞—Ä—Å–∏–º –ø–æ–¥–ø–∏—Å—å
	addr, amt, comm, err := parseMessage(message.Caption)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–¥–ø–∏—Å—å. –£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ê–¥—Ä–µ—Å: ...\n–°—É–º–º–∞: ..."))
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
	if addr == "" || amt == "" {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ –ø–æ–¥–ø–∏—Å–∏!"))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Å—Ä–µ–∑–µ)
	bestPhoto := message.Photo[len(message.Photo)-1]

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
	fileURL, err := bot.GetFileDirectURL(bestPhoto.FileID)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ: "+err.Error()))
		return
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Google Drive
	fileID, err := uploadPhotoToDrive(driveService, fileURL, parentFolderId, fmt.Sprintf("check_%s", time.Now().Format("20060102_150405")))
	if err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤ Google Drive: "+err.Error()))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
	fileLink := fmt.Sprintf("https://drive.google.com/file/d/%s/view", fileID)

	// –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
	timestamp := time.Now().Format("02.01.2006 15:04:05")
	username := getFullName(message.From)
	row := []interface{}{timestamp, username, addr, amt, comm, fileLink}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ Google Sheets
	appendRange := "–ß–µ–∫–∏!A:F"
	valueRange := &sheets.ValueRange{Values: [][]interface{}{row}}
	_, err = sheetsService.Spreadsheets.Values.Append(spreadsheetId, appendRange, valueRange).
		ValueInputOption("USER_ENTERED").
		InsertDataOption("INSERT_ROWS").
		Do()
	if err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É: "+err.Error()))
		return
	}

	// –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ
	bot.Send(tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n–ê–¥—Ä–µ—Å: %s\n–°—É–º–º–∞: %s", addr, amt)))
}

// handleMediaGroupMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥—Ä—É–ø–ø–æ–π —Ñ–æ—Ç–æ (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞)
func handleMediaGroupMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, sheetsService *sheets.Service, spreadsheetId string, driveService *drive.Service, parentFolderId string, adminID int64) {
	// –ï—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äì —Å–æ–æ–±—â–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
	if len(message.Photo) == 0 {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùóÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."))
		return
	}

	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –µ–¥–∏–Ω–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ
	if message.MediaGroupID == "" {
		handleSinglePhotoMessage(bot, message, sheetsService, spreadsheetId, driveService, parentFolderId)
		return
	}

	// –†–∞–±–æ—Ç–∞ —Å –∫—ç—à–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã
	mediaGroupCacheMu.Lock()
	groupData, exists := mediaGroupCache[message.MediaGroupID]
	if !exists {
		// –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ ‚Äì –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
		caption := message.Caption
		var addr, amt, comm string
		if caption != "" {
			var err error
			addr, amt, comm, err = parseMessage(caption)
			if err != nil {
				bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–¥–ø–∏—Å—å. –£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ê–¥—Ä–µ—Å: ...\n–°—É–º–º–∞: ..."))
				mediaGroupCacheMu.Unlock()
				return
			}
			if addr == "" || amt == "" {
				bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø—ã!"))
				mediaGroupCacheMu.Unlock()
				return
			}
		}
		// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
		groupData = &MediaGroupData{
			Files:            make(map[string]*tgbotapi.PhotoSize),
			Caption:          caption,
			Address:          addr,
			Amount:           amt,
			Comment:          comm,
			FirstMessageTime: time.Now(),
			LastUpdated:      time.Now(),
			UserID:           message.From.ID,
			ChatID:           message.Chat.ID,
			Username:         getFullName(message.From),
			IsProcessing:     false,
		}
		mediaGroupCache[message.MediaGroupID] = groupData
	}
	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ –≤ –∫—ç—à (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)
	bestPhoto := message.Photo[len(message.Photo)-1]
	if _, ok := groupData.Files[bestPhoto.FileID]; !ok {
		groupData.Files[bestPhoto.FileID] = &bestPhoto
		groupData.LastUpdated = time.Now()
	}
	mediaGroupID := message.MediaGroupID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã:
	// 1. –ü—Ä–æ—à–ª–æ –Ω–µ –º–µ–Ω–µ–µ 1 —Å–µ–∫ —Å –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ (–¥–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏—Ö–æ–¥ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ)
	// 2. –ì—Ä—É–ø–ø–∞ –µ—â—ë –Ω–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
	// 3. –õ–∏–±–æ —Å–æ–±—Ä–∞–Ω–æ 10 —Ñ–æ—Ç–æ, –ª–∏–±–æ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 2 —Å–µ–∫
	timeSinceFirst := time.Since(groupData.FirstMessageTime)
	shouldProcess := false
	if !groupData.IsProcessing && timeSinceFirst >= 1*time.Second &&
		(len(groupData.Files) >= 10 || timeSinceFirst >= 2*time.Second) {
		shouldProcess = true
		groupData.IsProcessing = true
	}
	mediaGroupCacheMu.Unlock()

	// –ï—Å–ª–∏ –ø–æ—Ä–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≥—Ä—É–ø–ø—É ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –≥–æ—Ä—É—Ç–∏–Ω—É
	if shouldProcess {
		go processMediaGroupOptimized(bot, mediaGroupID, sheetsService, spreadsheetId, driveService, parentFolderId, adminID)
	}
}

// processMediaGroupOptimized ‚Äì –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ç–æ
func processMediaGroupOptimized(bot *tgbotapi.BotAPI, mediaGroupID string, sheetsService *sheets.Service, spreadsheetId string, driveService *drive.Service, parentFolderId string, adminID int64) {
	// –ù–µ–º–Ω–æ–≥–æ –∂–¥—ë–º, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã
	time.Sleep(500 * time.Millisecond)

	mediaGroupCacheMu.Lock()
	groupData, exists := mediaGroupCache[mediaGroupID]
	if !exists || len(groupData.Files) == 0 {
		mediaGroupCacheMu.Unlock()
		return
	}
	// –°–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	addr := groupData.Address
	amt := groupData.Amount
	comm := groupData.Comment
	chatID := groupData.ChatID
	username := groupData.Username

	// –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –≤ —Å—Ä–µ–∑ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–ª–æ—â–∞–¥–∏)
	var photos []*tgbotapi.PhotoSize
	for _, photo := range groupData.Files {
		photos = append(photos, photo)
	}
	sort.Slice(photos, func(i, j int) bool {
		return photos[i].Width*photos[i].Height > photos[j].Width*photos[j].Height
	})
	mediaGroupCacheMu.Unlock()

	// –ï—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if addr == "" || amt == "" {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùóÔ∏è –£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø—ã!"))
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ (–∞–¥—Ä–µ—Å) –Ω–∞ Google Drive
	folderID, err := ensureObjectFolder(driveService, parentFolderId, addr)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–∞: "+err.Error()))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
	sanitized := sanitizeFileName(addr)
	moscow := time.FixedZone("MSK", 3*3600)
	dateFormatted := time.Now().In(moscow).Format("02.01.2006")

	// –ö–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
	uploadResults := make(chan string, len(photos))
	var uploadWg sync.WaitGroup
	uploadSemaphore := make(chan struct{}, maxConcurrentUploads)

	// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ç–æ
	for i, photo := range photos {
		uploadWg.Add(1)
		go func(index int, p *tgbotapi.PhotoSize) {
			defer uploadWg.Done()
			uploadSemaphore <- struct{}{} // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ—Ç
			defer func() { <-uploadSemaphore }()

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
			fileInfo, err := bot.GetFile(tgbotapi.FileConfig{FileID: p.FileID})
			if err != nil {
				return
			}
			fileURL := fileInfo.Link(bot.Token)
			// –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
			fileName := sanitizeFileName(fmt.Sprintf("%s_%s_%02d_%s.jpg", sanitized, dateFormatted, index+1, amt))
			// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏)
			link, err := downloadAndUploadFile(fileURL, fileName, driveService, folderID)
			if err != nil {
				return
			}
			uploadResults <- link
		}(i, photo)
	}
	go func() {
		uploadWg.Wait()
		close(uploadResults)
	}()

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ (–¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–æ–±–µ–ª–æ–º)
	var links []string
	for link := range uploadResults {
		links = append(links, link)
	}
	if len(links) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."))
		return
	}

	// –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
	parsedData := ParsedData{
		Address:  addr,
		Amount:   amt,
		Comment:  comm,
		Username: username,
		Date:     time.Now().In(moscow).Format("02/01/2006 15:04:05"),
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–±–µ–ª –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫, —á—Ç–æ–±—ã –æ–Ω–∏ —Å—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏
		DriveLink: strings.Join(links, " "),
	}
	if err := appendToSheet(sheetsService, spreadsheetId, parsedData); err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùóÔ∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É: "+err.Error()))
		return
	}

	// –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑ –∫—ç—à–∞
	mediaGroupCacheMu.Lock()
	delete(mediaGroupCache, mediaGroupID)
	mediaGroupCacheMu.Unlock()

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã
	bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –∏–∑ %d —Ñ–æ—Ç–æ.", len(links), len(photos))))
}

// downloadAndUploadFile —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –Ω–∞ Google Drive
func downloadAndUploadFile(fileURL, fileName string, driveService *drive.Service, folderID string) (string, error) {
	resp, err := http.Get(fileURL)
	if err != nil {
		return "", fmt.Errorf("‚ùóÔ∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", err)
	}
	defer resp.Body.Close()

	tmpFile, err := os.CreateTemp("", "tg_photo_*")
	if err != nil {
		return "", fmt.Errorf("‚ùóÔ∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è temp —Ñ–∞–π–ª–∞: %v", err)
	}
	defer os.Remove(tmpFile.Name())

	if _, err = io.Copy(tmpFile, resp.Body); err != nil {
		tmpFile.Close()
		return "", fmt.Errorf("‚ùóÔ∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
	}
	tmpFile.Close()

	var lastErr error
	for i := 0; i < maxRetries; i++ {
		file, err := os.Open(tmpFile.Name())
		if err != nil {
			return "", fmt.Errorf("‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
		}
		driveFile := &drive.File{
			Name:    fileName,
			Parents: []string{folderID},
		}
		res, err := driveService.Files.Create(driveFile).Media(file).Fields("webViewLink").Do()
		file.Close()
		if err == nil {
			return res.WebViewLink, nil
		}
		lastErr = err
		driveService, _ = refreshDriveService(driveService, err)
		time.Sleep(time.Duration(retryDelay*(i+1)) * time.Second)
	}
	return "", fmt.Errorf("‚ùóÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %v", maxRetries, lastErr)
}

// notifyAdminAboutSheetError —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
func notifyAdminAboutSheetError(bot *tgbotapi.BotAPI, adminID int64, err error, mediaGroupID string) {
	msg := tgbotapi.NewMessage(adminID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ Sheets –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã %s: %v", mediaGroupID, err))
	_, _ = bot.Send(msg)
}

// getFullName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FirstName + LastName)
func getFullName(user *tgbotapi.User) string {
	if user.LastName != "" {
		return fmt.Sprintf("%s %s", user.FirstName, user.LastName)
	}
	return user.FirstName
}

//
// ========================
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫ üîç
// ========================

// removeLeadingKeyword —É–¥–∞–ª—è–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
func removeLeadingKeyword(text string, keywords []string) string {
	trimmed := strings.TrimSpace(text)
	lower := strings.ToLower(trimmed)
	for _, kw := range keywords {
		if strings.HasPrefix(lower, kw) {
			return strings.TrimSpace(trimmed[len(kw):])
		}
	}
	return trimmed
}

// fallbackParse –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
func fallbackParse(message string) (string, string, string, error) {
	if strings.Contains(message, "\n") {
		lines := strings.Split(message, "\n")
		var addr, amt, comm string
		if len(lines) > 0 {
			addr = removeLeadingKeyword(strings.TrimSpace(lines[0]), fieldKeywords["address"])
		}
		if len(lines) > 1 {
			amt = removeLeadingKeyword(strings.TrimSpace(lines[1]), fieldKeywords["amount"])
			amt = cleanAmount(amt)
		}
		if len(lines) > 2 {
			comm = removeLeadingKeyword(strings.TrimSpace(strings.Join(lines[2:], "\n")), fieldKeywords["comment"])
		}
		if addr == "" || amt == "" {
			return "", "", "", errors.New("–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		}
		return addr, amt, comm, nil
	}
	lowerMsg := strings.ToLower(message)
	amountIdx := -1
	for _, kw := range fieldKeywords["amount"] {
		idx := strings.Index(lowerMsg, kw)
		if idx != -1 && (amountIdx == -1 || idx < amountIdx) {
			amountIdx = idx
		}
	}
	if amountIdx != -1 {
		addressPart := strings.TrimSpace(message[:amountIdx])
		amountPart := strings.TrimSpace(message[amountIdx:])
		addr := removeLeadingKeyword(addressPart, fieldKeywords["address"])
		amountPart = removeLeadingKeyword(amountPart, fieldKeywords["amount"])
		commentIdx := -1
		lowerAmountPart := strings.ToLower(amountPart)
		for _, kw := range fieldKeywords["comment"] {
			idx := strings.Index(lowerAmountPart, kw)
			if idx != -1 && (commentIdx == -1 || idx < commentIdx) {
				commentIdx = idx
			}
		}
		if commentIdx != -1 {
			amt := strings.TrimSpace(amountPart[:commentIdx])
			comm := removeLeadingKeyword(strings.TrimSpace(amountPart[commentIdx:]), fieldKeywords["comment"])
			amt = cleanAmount(amt)
			return addr, amt, comm, nil
		}
		return addr, cleanAmount(amountPart), "", nil
	}
	addr := removeLeadingKeyword(message, fieldKeywords["address"])
	return addr, "", "", errors.New("—Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
}

// parseMessage –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å, —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
func parseMessage(message string) (string, string, string, error) {
	if strings.TrimSpace(message) == "" {
		return "", "", "", errors.New("–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
	}
	if strings.Contains(message, ":") || strings.Contains(message, "=") {
		normalized := strings.Join(strings.Fields(message), " ")
		var matches []fieldMatch
		for field, keywords := range fieldKeywords {
			for _, kw := range keywords {
				pattern := fmt.Sprintf("(?i)%s\\s*[:=]\\s*", regexp.QuoteMeta(kw))
				re := regexp.MustCompile(pattern)
				locs := re.FindAllStringIndex(normalized, -1)
				for _, loc := range locs {
					matches = append(matches, fieldMatch{field: field, start: loc[0], end: loc[1]})
				}
			}
		}
		if len(matches) > 0 {
			sort.Slice(matches, func(i, j int) bool { return matches[i].start < matches[j].start })
			fieldValues := make(map[string]string)
			for i, m := range matches {
				endPos := len(normalized)
				if i < len(matches)-1 {
					endPos = matches[i+1].start
				}
				value := strings.TrimSpace(normalized[m.end:endPos])
				if _, exists := fieldValues[m.field]; !exists && value != "" {
					fieldValues[m.field] = value
				}
			}
			addr := fieldValues["address"]
			amt := cleanAmount(fieldValues["amount"])
			comm := fieldValues["comment"]
			if addr == "" || amt == "" {
				return fallbackParse(message)
			}
			return addr, amt, comm, nil
		}
		return fallbackParse(message)
	}
	return fallbackParse(message)
}

// cleanAmount –æ—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å—É–º–º–æ–π –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∑–∞–º–µ–Ω—è–µ—Ç —Ç–æ—á–∫—É –Ω–∞ –∑–∞–ø—è—Ç—É—é
func cleanAmount(amount string) string {
	re := regexp.MustCompile(`[^0-9.,]`)
	cleaned := re.ReplaceAllString(amount, "")
	return strings.ReplaceAll(cleaned, ".", ",")
}

// sanitizeFileName —É–¥–∞–ª—è–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
func sanitizeFileName(name string) string {
	re := regexp.MustCompile(`[^–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s\.-]`)
	sanitized := re.ReplaceAllString(name, "_")
	sanitized = regexp.MustCompile(`\s+`).ReplaceAllString(sanitized, " ")
	sanitized = strings.ReplaceAll(sanitized, " ", "_")
	sanitized = regexp.MustCompile(`_+`).ReplaceAllString(sanitized, "_")
	return strings.Trim(sanitized, "_")
}

//
// ========================
// HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Webhook –∏ —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ üöÄ
// ========================

// setupHandler –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
func setupHandler(bot *tgbotapi.BotAPI, sheetsService *sheets.Service, spreadsheetId string, driveService *drive.Service, parentFolderId string, adminID int64) {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
	initMediaGroupHandler()

	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.Method == "POST" {
			bytes, err := ioutil.ReadAll(r.Body)
			if err != nil {
				http.Error(w, "Bad Request", http.StatusBadRequest)
				return
			}
			var update tgbotapi.Update
			err = json.Unmarshal(bytes, &update)
			if err != nil {
				http.Error(w, "Bad Request", http.StatusBadRequest)
				return
			}
			if update.Message != nil {
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å)
				if update.Message.IsCommand() {
					switch update.Message.Command() {
					case "start", "help":
						helpText := `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ–∫–æ–≤!
						
–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é, –≥–¥–µ:
‚Ä¢ **–ê–¥—Ä–µ—Å**: –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ üè†
‚Ä¢ **–°—É–º–º–∞**: —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ –æ–ø–ª–∞—Ç–∞ üí∞
‚Ä¢ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π**: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É üòâ
						
–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∏ –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ (–¥–æ 10 —à—Ç—É–∫)! –ü–æ–¥–ø–∏—Å—å —É–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø—ã.
						
–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º?`
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, helpText)
						msg.ParseMode = "Markdown"
						bot.Send(msg)
					}
				} else if update.Message.Photo != nil {
					// –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ ‚Äì –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
					go handleMediaGroupMessage(bot, update.Message, sheetsService, spreadsheetId, driveService, parentFolderId, adminID)
				}
			}
			w.WriteHeader(http.StatusOK)
		} else {
			http.Error(w, "Unsupported method", http.StatusMethodNotAllowed)
		}
	})
}

// initMediaGroupHandler –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
func initMediaGroupHandler() {
	mediaGroupCleanupTicker = time.NewTicker(1 * time.Minute)
	go func() {
		for range mediaGroupCleanupTicker.C {
			cleanupExpiredMediaGroups()
		}
	}()
}

// cleanupExpiredMediaGroups —É–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
func cleanupExpiredMediaGroups() {
	mediaGroupCacheMu.Lock()
	defer mediaGroupCacheMu.Unlock()
	now := time.Now()
	for id, data := range mediaGroupCache {
		if now.Sub(data.LastUpdated) > 2*time.Minute {
			delete(mediaGroupCache, id)
		}
	}
}

// ========================
// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é –≤ Google Drive (–¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ) üì∏
// ========================
func uploadPhotoToDrive(driveService *drive.Service, fileURL, parentFolderId, filename string) (string, error) {
	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
	resp, err := http.Get(fileURL)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	driveFile := &drive.File{
		Name:     filename,
		MimeType: "image/jpeg",
	}
	if parentFolderId != "" {
		driveFile.Parents = []string{parentFolderId}
	}
	file, err := driveService.Files.Create(driveFile).Media(resp.Body).Do()
	if err != nil {
		return "", err
	}
	return file.Id, nil
}

// ========================
// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main() ‚Äì —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É üöÄ
// ========================
func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	telegramToken, spreadsheetId, driveFolderId, adminID, googleClientID, googleClientSecret, webhookURL := loadEnvVars()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OAuth –¥–ª—è Google API
	oauthConfig = &oauth2.Config{
		ClientID:     googleClientID,
		ClientSecret: googleClientSecret,
		RedirectURL:  "https://checkstosheets-production.up.railway.app/",
		Scopes: []string{
			"https://www.googleapis.com/auth/spreadsheets",
			"https://www.googleapis.com/auth/drive.file",
		},
		Endpoint: google.Endpoint,
	}

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º OAuth –∫–ª–∏–µ–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		ticker := time.NewTicker(30 * time.Minute)
		defer ticker.Stop()
		for range ticker.C {
			_, err := getOAuthClient(oauthConfig)
			if err != nil {
				// –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
			}
		}
	}()

	// –ü–æ–ª—É—á–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º OAuth —Ç–æ–∫–µ–Ω–æ–º
	client, err := getOAuthClient(oauthConfig)
	if err != nil {
		log.Fatalf("OAuth –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã Google Sheets –∏ Drive
	sheetsService, err := sheets.NewService(context.Background(), option.WithHTTPClient(client))
	if err != nil {
		log.Fatalf("Sheets —Å–µ—Ä–≤–∏—Å –Ω–µ —Å–æ–∑–¥–∞–Ω: %v", err)
	}
	driveService, err := drive.NewService(context.Background(), option.WithHTTPClient(client))
	if err != nil {
		log.Fatalf("Drive —Å–µ—Ä–≤–∏—Å –Ω–µ —Å–æ–∑–¥–∞–Ω: %v", err)
	}

	// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ Telegram
	bot, err := tgbotapi.NewBotAPI(telegramToken)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = true

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è Telegram
	parsedWebhookURL, err := url.Parse(webhookURL)
	if err != nil {
		log.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç WEBHOOK_URL: %v", err)
	}
	webhookConfig := tgbotapi.WebhookConfig{URL: parsedWebhookURL, MaxConnections: 40}
	_, err = bot.Request(webhookConfig)
	if err != nil {
		log.Fatalf("Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é keepAlive, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ "–∑–∞—Å—ã–ø–∞–ª"
	keepAlive(webhookURL)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
	setupHandler(bot, sheetsService, spreadsheetId, driveService, driveFolderId, adminID)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	server := &http.Server{Addr: ":" + port}
	go func() {
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: %v", err)
		}
	}()

	// –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C –∏–ª–∏ SIGTERM)
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt, syscall.SIGTERM)
	<-quit
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	_ = server.Shutdown(ctx)
	wg.Wait()
}
